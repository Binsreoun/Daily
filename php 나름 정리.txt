php 대충 내용 정리
참조:http://tcpschool.com/

echo() : 문자열을 출력해준다.
$변수명="변수" : 변수설정

기본타입
타입                         기본값
boolean()	    T/F        FALSE
integer() 	   정수       0
float()	   실수       0.0
string()	   문자       빈 문자열
array()	   배열       빈 배열

기본문법:<?php    ?>
주석 : //(한줄),  /*여러줄*/, #쉘스타일 

define() : 상수선언!
define(상수이름, 상숫값, 대소문자구분여부)

기본상수!
__LINE__ : 파일의 현재 줄 번호를 반환함.
__FILE__ : 파일의 전체 경로와 이름을 반환함.include 내부에서 사용할 경우 include된 파일명을 반환함.
__DIR__ : 파일의 디렉터리를 반환함. 포함한 파일 안에서 사용할 경우 포함된 파일의 디렉터리를 반환함.
             dirname(__FILE__)과 같은 결과를 반환함.
__FUNCTION__ : 함수의 이름을 반환함.
__CLASS__ : 클래스의 이름을 반환함. 클래스 이름은 대소문자를 구분함.
__TRAIT__ : 트레이트(trait)의 이름을 반환함.트레이트의 이름은 트레이트를 선언한 네임스페이스를 포함함.
__METHOD__ : 클래스의 메소드 이름을 반환함.
__NAMESPACE__ : 현재 네임스페이스의 이름을 반환함.

-------------------------------------------------------------------------------------------------------

조건문 if + elseif : 만약에
if (조건식1) {
    조건식1의 결과가 참일 때 실행하고자 하는 명령문;
}
elseif (조건식2) {
    조건식2의 결과가 참일 때 실행하고자 하는 명령문;
}
else {
    조건식1의 결과도 거짓이고, 조건식2의 결과도 거짓일 때 실행하고자 하는 명령문;
}

예제
<?php
$num_01 = 30;
$num_02 = 20;
if ($num_01 == $num_02) {
    echo "{$num_01}과 {$num_02}은 같은 수입니다.";
}
elseif ($num_01 < $num_02) {
    echo "{$num_01}은 {$num_02}보다 작은 수입니다.";
}
else { // $num_01 > $num_02
    echo "{$num_01}은 {$num_02}보다 큰 수입니다.";
}
?>

결과
30은 20보다 큰수입니다.
------------------------------------------------------------------------------------------------------------
switch 문 : switch는 if / else와 마찬가지로 주어진 조건 값에 따라다른 명령을 수행하도록 하는 조건문
switch (조건 값)
{
    case 값1:
        조건 값이 값1일 때 실행하고자 하는 명령문;
        break;
    case 값2:
        조건 값이 값2일 때 실행하고자 하는 명령문;
        break;
    ...
    default:
        해당 case가 없을 때 실행하고자 하는 명령문;
        break;
}

예제
<?php
$var = "오렌지";
switch ($var) {
    case "귤":
        echo "여기 있는 과일은 귤입니다.";
        break;
    case "사과":
        echo "여기 있는 과일은 사과입니다.";
        break;
    case "바나나":
        echo "여기 있는 과일은 바나나입니다.";
        break;
    default:
        echo "여기 있는 과일은 처음 보는 과일입니다.";
        break;
}
?>

결과
여기 있는 과일은 처음 보는 과일입니다.
-------------------------------------------------------------------------------------------------------
while 문 : 반복수행

while (조건식) {
    조건식의 결과가 참인 동안 반복적으로 실행하고자 하는 명령문;
}

예제
<?php
$i = 0;
while ($i < 5) {
    echo ($i++)."<br>";
}
?>

결과
0
1
2
3
4      
------------------------------------------------------------------------------------------------------------
 do / while 문 : 루프를 한 번 실행한 후에 표현식을 검사. 결과와 상관없이 무조건 한 번은 루프를 실행

do {
    조건식의 결과가 참인 동안 반복적으로 실행하고자 하는 명령문;
} while (조건식);

예제
<?php
$i = 0;
$j = 0;
while ($i > 5) {
    echo "변수 i의 값은 ".(++$i)."입니다.<br>";
}
do { // do / while문은 조건식과 상관없이 반드시 한 번은 루프를 실행함
    echo "변수 j의 값은 ".(++$j)."입니다.<br>";
} while ($j > 5);
?>

결과
변수 j의 값은 1입니다.
*while문과 do/while문 둘다 false값이지만 do/while문은 한번 실행이 되었다.
-------------------------------------------------------------------------------------------------------
for 문 :초기식, 표현식, 증감식을 모두 포함하고 있는 반복문

for (초기식; 조건식; 증감식) {
    조건식의 결과가 참인 동안 반복적으로 실행하고자 하는 명령문;
}

예제 
<?php
for ($i = 0; $i < 5; $i++) {
    echo "{$i}<br>";
}
?>

결과
0
1
2
3
4      
-------------------------------------------------------------------------------------------------------
foreach 문 : 배열의 각 요소를 지정된 변수에 대입

foreach (배열 as 값을저장할변수) {
    실행하고자 하는 명령문;
}

예제 1
<?php
$arr = array(2, 4, 6, 8);
foreach ($arr as $value) {
    echo "변수 \$value의 현재값은 {$value}입니다.<br>";
}
?>

결과1
변수 $value의 현재값은 2입니다.
변수 $value의 현재값은 4입니다.
변수 $value의 현재값은 6입니다.
변수 $value의 현재값은 8입니다.

예제2
<?php
$arr = array(
    "둘" => 2,
    "넷" => 4,
    "여섯" => 6,
    "여덟" => 8,
);
foreach ($arr as $key => $value) {
    echo "배열 \$arr에서 키값 '{$key}'에 대한 값은 {$value}입니다.<br>";
}
unset($value);
?>

결과2
배열 $arr에서 키값 '둘'에 대한 값은 2입니다.
배열 $arr에서 키값 '넷'에 대한 값은 4입니다.
배열 $arr에서 키값 '여섯'에 대한 값은 6입니다.
배열 $arr에서 키값 '여덟'에 대한 값은 8입니다.
-------------------------------------------------------------------------------------------------------
기타 제어문

continue 문 : 루프 내에서 사용하며 루프의 나머지 부분을 건너뛰고 바로 다음으로 판단하여 넘어가게 함.
break 문 : 루프 내에서 사용하며 해당 반복문을 완전히 종료시키고 다음에 위치한 명령문으로 이동
goto 문 : 프로그램의 흐름을 지정된 레이블(label)로 무조건 변경
그외
endif; , endswitch; , endwhile; , endfor; , endforeach;를 사용하여 반복문 제어가능

배열
$배열이름 = array(배열요소1, 배열요소2, ...);

배열추가(인덱스를 생략가능, 0부터 시작하여 1씩 증가하며 순서대로 저장)
$arr = array();     // 배열 생성
$arr[0] = "apple";  // 배열 요소 추가
$arr[1] = "banana";
$arr[2] = "orange";

2차원배열
$배열이름 = array(
    array(배열요소00, 배열요소01, ...),
    array(배열요소10, 배열요소11, ...),
    ...
);
-------------------------------------------------------------------------------------------------------
함수 

함수기본구조
function 함수이름(매개변수1, 매개변수2,...) : 타입
{
    함수가 호출 되었을 때 실행될 코드;
}

예제
<?php
function sum($x, $y) // 함수의 이름은 sum()이며, 변수 x, y를 매개변수로 가지는 함수를 정의함
{
    return $x + $y;  // 매개변수 x, y를 더한 값을 반환함.
}
echo sum(1, 2);      // sum() 함수에 숫자 1와 2을 인수로 전달하여 호출함
?>

결과
3

매개변수
(1) 값 전달방식 : 가져온 변수에 영향 X
예제
<?php
function increment($para)
{
    $para++; // $value의 값을 복사하여 increment() 함수에 인수로 전달함
}
$value = 1;
increment($value);
?>

결과
2
* $value의 값은 1이다

(2) 참조 전달방식 : 가져온 변수에 영향 O
<?php
function increment(&$para) // 인수로 전달되는 값의 원본을 참조함
{
    $para++;
}
$value = 1;
increment($value);
?>

결과
2
* $value의 값은 2이다

(3)default 매개변수 : 대입 연산자(=)를 이용
예제
function sum($value1, $value2 = 0, $value3 = 0)
{
    return $value1 + $value2 + $value3;
}

echo sum(1, 2, 3); // 6
echo sum(1, 2);    // 3
echo sum(1);       // 1
//echo sum();      // 오류가 발생함.
-------------------------------------------------------------------------------------------------------
변수 타입 확인 및 변경

gettype() : 전달받은 변수의 타입을 반환
settype() : 전달받은 변수의 타입을 변경(boolean, integer, string, array, object, float, null )-> T/F
is_array() : 전달받은 변수의 타입이 배열인지를 확인
is_bool() : 전달받은 변수의 타입이 논리형인지를 확인
is_callable() :변수의 내용을 함수처럼 호출할 수 있는지를 확인
is_float(), is_double(), is_real() : 전달받은 변수의 타입이 실수인지를 확인
is_int(), is_integer(), is_long() : 전달받은 변수의 타입이 정수인지를 확인
is_null() : 전달받은 변수의 타입이 NULL인지를 확인
is_numeric() : 전달받은 변수가 수나 숫자로 이루어진 문자열인지를 확인
is_object() : 전달받은 변수의 타입이 객체인지를 확인
is_resource() : 전달받은 변수의 타입이 자원인지를 확인
is_scalar() : 전달받은 변수가 스칼라값인지를 확인
is_string() : 전달받은 변수의 타입이 문자열인지를 확인

변수의 상태 변경

isset() : 함수는 전달받은 변수가 선언되어 있는지를 검사.(존재 : true, 존재X : false)
unset() : 함수는 전달받은 변수를 제거.
empty() : 함수는 전달받은 변수가 비어있는지를 검사. 해당 변수가 비어있지 않으면 false를 반환.

예제
$var;
var_dump(isset($var)); // false
var_dump(empty($var)); // true

$var = 5;

var_dump(isset($var)); // true
var_dump(empty($var)); // false 

$var = 0;

var_dump(isset($var)); // true
var_dump(empty($var)); // true

unset($var);
var_dump(isset($var)); // false
var_dump(empty($var)); // true
-------------------------------------------------------------------------------------------------------
배열 요소, 탐색, 정렬

count(),sizeof() : 배열에 저장된 배열 요소의 개수를 반환
current(),pos() 함수는 배열 포인터가 현재 가리키고 있는 요소를 반환

next() : 배열 포인터를 앞으로 하나 이동시킨 후 해당 요소를 반환
prev() : 배열 포인터를 뒤로 하나 이동시킨 후에, 해당 요소를 반환
each() : 배열 포인터가 현재 가리키고 있는 키와 값을 반환하고, 배열 포인터를 앞으로 하나 이동
reset() : 배열 포인터가 첫 번째 배열 요소를 가리키도록 한 뒤 해당 요소의 값을 반환
end() : 배열 포인터가 마지막 배열 요소를 가리키도록 한 뒤 해당 요소의 값을 반환

sort() : 배열 요소들을 정렬 기준에 맞게 정렬(대문자가 소문자보다 앞쪽으로 정렬)
ksort() : 각 요소의 키를 기준으로 정렬
asort() : 각 요소의 값을 기준으로 정렬
shuffle() : 배열 요소를 섞은 뒤에 무작위로 재배치
array_reverse() : 전달받은 배열의 순서를 역순으로 변경한 새로운 배열을 반환(원본에는 영향X)

문자열
strlen() : 문자열의 길이를 반환(한글 포함시 문자열의 총 바이트(byte) 수로 반환)
mb_strlen($str, "UTF-8") : 한글이 포함된 문자열의 길이 반환

strcmp() : 전달받은 두 개의 문자열을 서로 비교
strncasecmp() : 전달받은 두 개의 문자열을 서로 비교(대소문자 구분X)

strstr("","") : 해당 문자열에서 전달받은 문자열과 처음으로 일치하는 부분을 모든 문자와 같이 반환
strrchr() : 문자열에서 전달받은 문자열과 마지막으로 일치하는 부분을 찾음
strpos() : 문자열에서 전달받은 문자열과 처음으로 일치하는 부분의 시작 인덱스를 반환
strrpos() : 문자열에서 전달받은 문자열과 마지막으로 일치하는 부분의 시작 인덱스를 반환
substr() : 문자열에서 특정 인덱스부터 전달받은 길이만큼의 일부분을 추출하여 반환

strtolower() : 전달받은 문자열의 모든 문자를 소문자로 바꿈
strtoupper() : 전달받은 문자열의 모든 문자를 대문자로 바꿈
explode() : 특정 문자를 기준으로 전달받은 문자열을 나누어서 하나의 배열로 반환
implode(), join() : 전달받은 배열의 각 요소를 특정 문자를 사용하여 하나로 합쳐친 문자열로 반환
strtok() : 전달받은 문자열을 특정 문자를 기준으로 토큰화
-------------------------------------------------------------------------------------------------------
날짜

date() :전달받은 형식에 맞춰 날짜와 시간 정보를 문자열로 반환

형태	설명	
d    날짜를 두 자리 숫자로 표현함
D    요일을 세 개의 문자로 표현함
j    날짜를 숫자로 표현함
l    요일을 완전한 문자열로 표현함
N    요일을 ISO-8601 숫자로 표현함
S    날짜 뒤에 영어 서수를 붙임
w    요일을 숫자로 표현함
z    일 년 중 몇 번째 날인지를 숫자로 표현함
W    일 년 중 몇 번째 주인지를 숫자로 표현함
F    월을 완전한 문자열로 표현함
m    월을 두 자리 숫자로 표현함
M    월의 축약형을 세 개의 문자로 표현함
n    월을 숫자로 표현함
t    해당 월의 총일 수를 숫자로 표현함
L    윤년 여부를 표현함
o    ISO-8601 연도값으로 Y값과 같은 값을 나타냄, W값이 이전 해나 다음 해에 포함되면, 연도로 사용
Y    연도를 완전한 네 자리 숫자로 표현함
y    연도를 두 자리 숫자로 표현함
a    오전과 오후의 소문자를 표현함
A    오전과 오후의 대문자를 표현함
B    견본 인터넷 시간을 표현함
g    12시간 형식으로 시간을 표현함
G    24시간 형식으로 시간을 표현함
h    12시간 형식 시간을 두 자리 숫자로 표현함
H    24시간 형식 시간을 두 자리 숫자로 표현함
i    분을 두 자리 숫자로 표현함
s    초를 두 자리 숫자로 표현함
u    초를 마이크로초로 표현함
e    시간대(timezone) 식별자를 표현함
I    서머타임 적용 여부를 표현함
O    그리니치 시각(GMT)과 시차를 표현함
P    시와 분 사이에 콜론이 들어가는 그리니치 시각(GMT)과 시차를 표현함
T    시간대(timezone)를 나타내는 축약어임	
Z    시간대(timezone)를 나타내는 오프셋 초를 표현함
UTC     서쪽은 항상 음수, UTC 동쪽은 항상 양수로 표현됨
c    ISO-8601 형식의 날짜를 표현함
r    RFC 2822 형식의 날짜를 표현함
U    타임스탬프를 표현함

mktime(): 시, 분, 초, 월, 일, 연도를 인수로 전달받아서 타임스탬프(timestamp)를 반환
time() : 인수를 전달받지 않고, 현재 날짜와 시간에 대한 타임스탬프를 반환
-------------------------------------------------------------------------------------------------------
수학관련

최댓값과 최솟값
max() : 가장 큰 수를 반환
min() : 가장 작은 수를 반환

올림과 내림
floor() : 올림
cei() : 내림
round() : 반올림
-------------------------------------------------------------------------------------------------------
정규 표현식 : 특정한 규칙을 가지는 문자열의 집합을 찾아내기 위한 검색 패턴

1. POSIX
2. PCRE(Perl-Compatible Regular Expression)

기본문법
/검색패턴/플래그

preg_match() : 문자열에서 전달받은 정규 표현식과 일치하는 패턴을 검색

플래그(flag)                      설명
i	검색 패턴을 비교할 때 대소문자를 구분하지 않도록 설정.
g	검색 패턴을 비교할 때 일치하는 모든 부분을 선택하도록 설정
m	검색 패턴을 비교할 때 여러 줄의 입력 문자열을 그 상태 그대로 여러 줄로 비교하도록 설정
y	대상 문자열의 현재 위치부터 비교를 시작하도록 설정
u	대상 문자열이 UTF-8로 인코딩된 것으로 설정

예제
<?php
$subject = "간장 공장 공장장은 강 공장장이고, 된장 공장 공장장은 장 공장장이다.";

if (preg_match('/공장/', $subject)) {
    echo "해당 문자열에서 '공장'을 발견했습니다.<br>";
} else {
    echo "해당 문자열에서 '공장'을 발견하지 못했습니다.<br>";
}
if (preg_match('/장공/', $subject)) {
    echo "해당 문자열에서 '장공'을 발견했습니다.<br>";
} else {
    echo "해당 문자열에서 '장공'을 발견하지 못했습니다.<br>";
}
?>

결과
해당 문자열에서 '공장'을 발견했습니다.
해당 문자열에서 '장공'을 발견하지 못했습니다.

특수문자	           설명
.    줄 바꿈 문자(\n)를 제외한 임의의 한 문자를 의미함
?    해당 문자 패턴이 0번 또는 1번만 반복됨.
*    해당 문자 패턴이 0번 이상 반복됨.
+    해당 문자 패턴이 1번 이상 반복됨.
{...}    반복되는 횟수를 지정함.
^    문자열의 처음을 의미함.
$    문자열의 끝을 의미함.
\    특수문자를 무시함.
|    선택을 의미함. (OR)
(...)    그룹화의 시작과 끝을 의미함.

예제(정규표현식)
/.ap/         // 문자열 "ap" 앞에 임의의 한 문자가 등장하는 문자열 : aap, bap, cap, @ap, #ap, ...
/a?b/         // b 앞에 a가 0번 또는 1번 등장하는 문자열 : b, ab
/a*b/         // b 앞에 a가 0번 이상 등장하는 문자열 : b, ab, aab, aaab, ...
/a+b/         // b 앞에 a가 1번 이상 등장하는 문자열 : ab, aab, aaab, aaaab, ...
/a{2,4}b/     // b 앞에 a가 2번 이상 4번 이하 등장하는 문자열 : aab, aaab, aaaab
/a{2,}b/      // b 앞에 a가 2번 이상 등장하는 문자열 : aab, aaab, aaaab, aaaaab, ...
/^abc/        // abc로 시작하는 문자열 : abc, abcd, abcdef, ...
/abc$/        // abc로 끝나는 문자열 : abc, zabc, xyzabc, ...
/abc|def|ghi/ // abc, def 또는 ghi 중 하나의 문자열

위치 문자
 '^' :단어의 맨 앞에 위치한 해당 패턴만을 검색합니다.
 '$' :  단어의 맨 뒤에 위치한 해당 패턴만을 검색합니다.

예제
$subject = "abcdef defabc";

// 단어가 문자열 "abc"로 시작하는 경우를 검색하여, 해당 부분 문자열을 'ABC'로 대체함.
$match_01 = preg_replace('/^abc/', 'ABC',$subject);
// 단어가 문자열 "abc"로 끝나는 경우를 검색하여, 해당 부분 문자열을 'ABC'로 대체함.
$match_02 = preg_replace('/abc$/', 'ABC', $subject);

POSIX 문자 클래스: POSIX 정규 표현식에서만 사용할 수 있는 문자 클래스

문자 클래스	설명
[:alnum:]영문자와 숫자에 포함되는지를 확인함.
[:alpha:]    영문 대소문자에 포함되는지를 확인함.
[:lower:]    영문 소문자에 포함되는지를 확인함.
[:upper:]    영문 대문자에 포함되는지를 확인함.
[:digit:]    십진법 숫자에 포함되는지를 확인함.
[:xdigit]    16진법 숫자나 문자에 포함되는지를 확인함.
[:punct:]    구두점에 포함되는지를 확인함.
[:blank:]    탭과 띄어쓰기에 포함되는지를 확인함.
[:space:]    공백 문자에 포함되는지를 확인함.
[:cntrl:]    제어 문자에 포함되는지를 확인함.
[:print:]    출력할 수 있는 문자에 포함되는지를 확인함.
[:graph:]    띄어쓰기를 제외한 모든 출력할 수 있는 문자에 포함되는지를 확인함.

예제
전화번호 확인
① /^[[:digit:]]{2}\-[[:digit:]]{4}\-[[:digit:]]{4}/     // 02-1234-5678, ...
② /^[[:digit:]]{2,3}\-[[:digit:]]{3,4}\-[[:digit:]]{4}/ // 02-1234-5678, 031-123-5678, 010-1234-5678, ...
-------------------------------------------------------------------------------------------------------